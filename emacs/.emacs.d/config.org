* Emacs configuration
This file contains the majority of my Emacs configuration. It is written in Org mode for easy readability and management.

For more configs check out [[https://github.com/caisah/emacs.dz][this collection]].
* Org
** settings
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
#+END_SRC
** bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-switchb)
#+END_SRC
** src block
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
** org-babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
    'org-babel-load-languages
      '((python . t)
	(matlab . t)))
#+END_SRC
* pdf-tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page))
#+END_SRC
* LaTeX
** Auctex
#+BEGIN_SRC emacs-lisp
  (use-package tex-site
    :ensure auctex
    :config
    (add-hook 'LaTeX-mode-hook
		(lambda ()
		(rainbow-delimiters-mode)
		(turn-on-reftex)
		(setq reftex-plug-into-AUCTeX t)
		(reftex-isearch-minor-mode)
		(setq TeX-PDF-mode t)
		(setq TeX-source-correlate-method 'synctex)
		(setq TeX-source-correlate-start-server t)
		(TeX-source-correlate-mode)))

  ;; Use pdf-tools to open PDF files
  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
	TeX-source-correlate-start-server t)

  ;; Update PDF buffers after successful LaTeX runs
  (add-hook 'TeX-after-compilation-finished-functions
	     'TeX-revert-document-buffer))
#+END_SRC
** reftex
#+BEGIN_SRC emacs-lisp
  (use-package reftex
    :ensure t
    :defer t
    :config
    (setq reftex-cite-prompt-optional-args t))
#+END_SRC
* Helm
** Setup
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind (("M-x" . helm-M-x)
	   ("C-x C-f" . helm-find-files)
	   ("M-y" . helm-show-kill-ring)))
  (global-set-key (kbd "C-x b") 'helm-mini)
  (setq helm-buffers-fuzzy-matching t
	helm-recentf-fuzzy-match    t)
#+END_SRC
* Ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :bind* ("M-o" . ace-window)
    :ensure t
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)
	  aw-dispatch-always t))
#+END_SRC
* Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+END_SRC
* buffers
** enable ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
** kill current buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+END_SRC
* Which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
* rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
* sudo-edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t)
#+END_SRC
* theme
** spacemacs-theme
#+BEGIN_SRC emacs-lisp
  (use-package spacemacs-theme
    :ensure t
    :no-require t
    :init
    (load-theme 'spacemacs-dark t))
#+END_SRC
* settings
** GUI 
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  ;(menu-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-message t)
  (setq inhibit-splash-screen t)
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
  (set-frame-font "Hack-12" nil t)
 #+END_SRC
** scratch message
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message nil)
#+END_SRC
** no backups
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC
** garbage collection
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-treshold 20000000)
#+END_SRC
** confirm before closing emacs
#+BEGIN_SRC emacs-lisp
  ;; (setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC
** always follow symlinks
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC
** ask y/n
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** columns and rows
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
** diminish minor modes
#+BEGIN_SRC emacs-lisp
  (use-package abbrev
    :diminish abbrev-mode
    :config
    (if (file-exists-p abbrev-file-name)
        (quietly-read-abbrev-file)))
#+END_SRC
